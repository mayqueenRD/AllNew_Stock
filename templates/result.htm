<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <link href="/static/css/nv.d3.css" rel="stylesheet" type="text/css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.2/d3.min.js" charset="utf-8"></script>
    <script src="/static/js/nv.d3.js"></script>
    <script src="/static/js/stream_layers.js"></script>

    <style>
        text {
            font: 12px sans-serif;
        }

        svg {
            display: block;
        }
        html, body, #chart1, svg {
            margin: 0px;
            padding: 0px;
            height: 100%;
            width: 100%;
        }
        button {
            margin: 2px;
            margin-left: 70px;
        }
    </style>
    <style>
        text {
            font: 12px sans-serif;
        }
        svg {
            display: block;
        }
        html, body, #chart2, svg {
            margin: 0px;
            padding: 0px;
            height: 100%;
            width: 100%;
        }
    </style>
    <style>
        text {
            font: 12px sans-serif;
        }
        svg {
            display: block;
        }
        html, body, #chart3, svg {
            margin: 0px;
            padding: 0px;
            height: 100%;
            width: 100%;
        }
    </style>
</head>
<body>
  <h1>2015 MayQueen 股神網系統</h1>
  <p></p>
  <h2>查詢代碼:{{code}}</h2>
  <div id="chart1" class='with-3d-shadow with-transitions'>
    <svg> </svg>
  </div>

  <script>
    var testdata = [
        {
            "key" : "買賣超股數" ,
            "bar": true,
            "values" :  [  {% for row in fucker %}[ {{row[0]}} , {{row[1]}}] ,{% endfor %}]
        },
        {
            "key":"股價",
            "values": [  {% for row in price %}[ {{row[0]}} , {{row[1]}}] ,{% endfor %}]
 
        }
    ].map(function(series) {
            series.values = series.values.map(function(d) { return {x: d[0], y: d[1] } });
            return series;
        });

    var chart;
    nv.addGraph(function() {
        chart = nv.models.linePlusBarChart()
            .margin({top: 50, right: 60, bottom: 30, left: 70})
            .x(function(d,i) { return i })
            .legendRightAxisHint(' [Using Right Axis]')
            .color(d3.scale.category10().range());

        chart.xAxis.tickFormat(function(d) {
            var dx = testdata[0].values[d] && testdata[0].values[d].x || 0;
            return dx ? d3.time.format('%x')(new Date(dx)) : '';
            })
            .showMaxMin(false);

        chart.y1Axis.tickFormat(function(d) { return '$' + d3.format(',f')(d) });
        chart.bars.forceY([0]).padData(false);

        chart.xAxis.showMaxMin(false);
        chart.x2Axis.showMaxMin(false);

        d3.select('#chart1 svg')
            .datum(testdata)
            .transition().duration(500).call(chart);

        nv.utils.windowResize(chart.update);

        chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });

        return chart;
    });

  </script>
  <br>
  <h2>歷年股利:單位(元)</h2>
  <div id="chart2">
  <svg></svg>
  </div>

  <script>
    historicalBarChart = [
        {
            key: "Cumulative Return",
            values: [
                {% for row in bonus %}
                {
                    "label":"{{row[0]}}年",
                    "value":{{row[1]}}
                },
                {% endfor %}
            ]
        }
    ];

    nv.addGraph(function() {
        var chart = nv.models.discreteBarChart()
            .x(function(d) { return d.label })
            .y(function(d) { return d.value })
            .staggerLabels(true)
            //.staggerLabels(historicalBarChart[0].values.length > 8)
            .tooltips(false)
            .showValues(true)
            .duration(250)
            ;

        d3.select('#chart2 svg')
            .datum(historicalBarChart)
            .call(chart);

        nv.utils.windowResize(chart.update);
        return chart;
    });
  </script>

  <br>
  <h2>營收累計:單位(元)</h2>
  <div id="chart3">
  <svg></svg>
  </div>

<script>

    var income=[ [{% for row in income %} {{row[0]}}, {% endfor %}] , [{% for row in income %} {{row[1]}}, {% endfor %}]];
    var negative_test_data = new d3.range(0,2).map(function(d,i) {
        return {
            key: i+102,
            values: new d3.range(1,13).map( function(f,j) {
                return {
                    y: income[i][j],
                    x: j+1
                }
            })
        };
    });

    var chart;
    nv.addGraph(function() {
        chart = nv.models.multiBarChart()
            .barColor(d3.scale.category20().range())
            .duration(300)
            .margin({bottom: 100, left: 70})
            .rotateLabels(45)
            .groupSpacing(0.1)
        ;

        chart.reduceXTicks(false).staggerLabels(true);

        chart.xAxis
            .axisLabel("月份")
            .axisLabelDistance(35)
            .showMaxMin(false)
            .tickFormat(d3.format(',.0f'))
        ;

        chart.yAxis
            .axisLabel("營收(元)")
            .axisLabelDistance(-5)
            .tickFormat(d3.format(',.01f'))
        ;

        chart.dispatch.on('renderEnd', function(){
            nv.log('Render Complete');
        });

        d3.select('#chart3 svg')
            .datum(negative_test_data)
            .call(chart);

        nv.utils.windowResize(chart.update);

        chart.dispatch.on('stateChange', function(e) {
            nv.log('New State:', JSON.stringify(e));
        });
        chart.state.dispatch.on('change', function(state){
            nv.log('state', JSON.stringify(state));
        });

        return chart;
    });

</script>

  <script src="/static/js/selectDate.js" type="text/javascript"></script>
</body>
</html>
